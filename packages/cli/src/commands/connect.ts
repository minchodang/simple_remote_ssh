import { spawn } from 'child_process';
import inquirer from 'inquirer';
import chalk from 'chalk';
import ora from 'ora';
import { loadConfig, getHost } from '../utils/config.js';
import type { ConnectionOptions } from '../types/ssh.js';

export async function connectCommand(hostName?: string, options: ConnectionOptions = {}) {
    const config = await loadConfig();

    let targetHost;

    if (hostName) {
        // Host name specified
        targetHost = await getHost(hostName);
        if (!targetHost) {
            console.log(chalk.red(`‚ùå Host '${hostName}' not found.`));
            return;
        }
    } else {
        // Host selection
        if (config.hosts.length === 0) {
            console.log(chalk.yellow('‚ö†Ô∏è  Ï†ÄÏû•Îêú Ìò∏Ïä§Ìä∏Í∞Ä ÏóÜÏäµÎãàÎã§.'));
            console.log(chalk.blue('üí° Î®ºÏ†Ä Ìò∏Ïä§Ìä∏Î•º Ï∂îÍ∞ÄÌï¥Î≥¥ÏÑ∏Ïöî: simple-ssh add'));
            console.log(chalk.yellow('‚ö†Ô∏è  No saved hosts found.'));
            console.log(chalk.blue('üí° Add a host first: simple-ssh add'));
            return;
        }

        const { selectedHost } = await inquirer.prompt([
            {
                type: 'list',
                name: 'selectedHost',
                message: 'Select a host to connect:',
                choices: config.hosts.map(host => ({
                    name: `${chalk.cyan(host.name)} - ${host.user}@${host.host}:${host.port}${host.description ? ` (${host.description})` : ''}`,
                    value: host.name,
                })),
            },
        ]);

        targetHost = await getHost(selectedHost);
    }

    if (!targetHost) {
        console.log(chalk.red('‚ùå Host not found.'));
        return;
    }

    // Apply connection options
    const user = options.user || targetHost.user;
    const port = options.port ? parseInt(options.port) : targetHost.port;

    console.log(chalk.blue(`üîó Connecting to ${targetHost.name}...`));
    console.log(chalk.gray(`   ${user}@${targetHost.host}:${port}`));

    // SSH Î™ÖÎ†πÏñ¥ Íµ¨ÏÑ±
    const sshArgs = ['-p', port.toString()];
    const spinner = ora('Attempting SSH connection...').start();
     const sshArgs = ['-p', port.toString()];
     // SSH Î™ÖÎ†πÏñ¥ Íµ¨ÏÑ±

    // ÌÇ§ ÌååÏùºÏù¥ ÏûàÏúºÎ©¥ Ï∂îÍ∞Ä
    if (targetHost.keyPath) {
        sshArgs.unshift('-i', targetHost.keyPath);
    }
    // Build SSH command
    const sshArgs = ['-p', port.toString(), `${user}@${targetHost.host}`];
     // ÏûêÎèô Î™ÖÎ†πÏñ¥Í∞Ä ÏûàÎäîÏßÄ ÌôïÏù∏
     const hasAutoCommands = targetHost.autoCommands && targetHost.autoCommands.length > 0;
     
     if (hasAutoCommands) {
         console.log(chalk.blue(`ü§ñ ÏûêÎèô Î™ÖÎ†πÏñ¥ ${targetHost.autoCommands!.length}Í∞úÍ∞Ä ÏÑ§Ï†ïÎêòÏñ¥ ÏûàÏäµÎãàÎã§:`));
         targetHost.autoCommands!.forEach((cmd, index) => {
             console.log(`   ${chalk.dim(`${index + 1}.`)} ${chalk.yellow(cmd)}`);
         });
         console.log();
         
         // ÏûêÎèô Î™ÖÎ†πÏñ¥Îì§ÏùÑ ÏÑ∏ÎØ∏ÏΩúÎ°†ÏúºÎ°ú Ïó∞Í≤∞ÌïòÍ≥† ÎßàÏßÄÎßâÏóê bash Ï∂îÍ∞Ä (ÎåÄÌôîÌòï ÏÑ∏ÏÖò Ïú†ÏßÄ)
         const commandString = targetHost.autoCommands!.join('; ') + '; bash';
         sshArgs.push(`${user}@${targetHost.host}`, commandString);
     } else {
         // ÏùºÎ∞ò ÎåÄÌôîÌòï Ïó∞Í≤∞
         sshArgs.push(`${user}@${targetHost.host}`);
     }

    // ÏûêÎèô Î™ÖÎ†πÏñ¥Í∞Ä ÏûàÎäîÏßÄ ÌôïÏù∏
    const hasAutoCommands = targetHost.autoCommands && targetHost.autoCommands.length > 0;
    // Add key file if specified
    if (targetHost.keyPath) {
        sshArgs.unshift('-i', targetHost.keyPath);
    }

    if (hasAutoCommands) {
        console.log(chalk.blue(`ü§ñ ÏûêÎèô Î™ÖÎ†πÏñ¥ ${targetHost.autoCommands!.length}Í∞úÍ∞Ä ÏÑ§Ï†ïÎêòÏñ¥ ÏûàÏäµÎãàÎã§:`));
        targetHost.autoCommands!.forEach((cmd, index) => {
            console.log(`   ${chalk.dim(`${index + 1}.`)} ${chalk.yellow(cmd)}`);
        });
        console.log();

        // ÏûêÎèô Î™ÖÎ†πÏñ¥Îßå Ïã§Ìñâ (ÎåÄÌôîÌòï ÏÑ∏ÏÖòÏùÄ Î≥ÑÎèÑÎ°ú)
        const commandString = targetHost.autoCommands!.join(' && ');
        sshArgs.push(`${user}@${targetHost.host}`, commandString);
    } else {
        // ÏùºÎ∞ò ÎåÄÌôîÌòï Ïó∞Í≤∞
        sshArgs.push(`${user}@${targetHost.host}`);
    }

    // ÎπÑÎ∞ÄÎ≤àÌò∏ ÏÇ¨Ïö© Ïãú ÎåÄÌôîÌòï Î™®Îìú Í∞ïÏ†ú
    if (targetHost.usePassword) {
        console.log(chalk.yellow('üí° ÎπÑÎ∞ÄÎ≤àÌò∏Î•º ÏÇ¨Ïö©ÌïòÎäî Ìò∏Ïä§Ìä∏ÏûÖÎãàÎã§. Ïó∞Í≤∞ ÌõÑ ÎπÑÎ∞ÄÎ≤àÌò∏Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.'));
    }

    console.log(chalk.green(`‚úÖ SSH Ïó∞Í≤∞ÏùÑ ÏãúÏûëÌï©ÎãàÎã§...`));
    console.log(chalk.gray(`Ïã§Ìñâ Î™ÖÎ†πÏñ¥: ssh ${sshArgs.join(' ')}`));
    // Show password prompt info
    if (targetHost.usePassword) {
        console.log(chalk.yellow('üí° This host uses password authentication. Please enter password when prompted.'));
    }

    spinner.stop();

    console.log(chalk.green(`‚úÖ Starting SSH connection...`));
    console.log(chalk.gray(`Command: ssh ${sshArgs.join(' ')}`));
    console.log();

    // Execute SSH process
    const sshProcess = spawn('ssh', sshArgs, {
        stdio: 'inherit',
        shell: false,
    });

    sshProcess.on('error', error => {
        console.log(chalk.red(`‚ùå SSH connection failed: ${error.message}`));
    });

    sshProcess.on('exit', code => {
        if (code === 0) {
            console.log(chalk.green('‚úÖ SSH connection closed.'));
        } else {
            console.log(chalk.yellow(`‚ö†Ô∏è  SSH connection closed with code ${code}.`));
        }
    });
}
